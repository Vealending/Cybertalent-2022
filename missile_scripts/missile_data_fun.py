import struct
import nvector as nv
import folium
import math

missile_data = [
    # submarine, missile_no, tof, [target]
    (1, 1,  1080.00, [[3965173.80], [-8172.61],    [4986679.35]]),
    (1, 2,  1080.00, [[3877218.23], [-128524.04],  [5053741.33]]),
    (1, 3,  1080.00, [[3788140.78], [-148481.80],  [5120310.89]]),
    (1, 4,  1080.00, [[3793400.39], [-197697.20],  [5114750.27]]),
    (1, 5,  1080.00, [[3761259.92], [-101682.56],  [5141228.01]]),
    (1, 6,  1200.00, [[3565283.98], [-265059.37],  [5273341.89]]),
    (1, 7,  1200.00, [[3561474.41], [-199048.12],  [5278818.14]]),
    (1, 8,  1000.00, [[3798982.34], [-97495.01],   [5113498.70]]),
    (1, 9,  1080.00, [[3780277.58], [-415086.43],  [5111442.62]]),
    (1, 10, 1100.00, [[3904518.71], [292813.87],   [5025796.92]]),
    (1, 11, 500.00,  [[4517609.64], [-45797.26],   [4492076.00]]),
    (1, 12, 1300.00, [[3931251.08], [515136.93],   [4986936.93]]),
    (1, 13, 900.00,  [[4840420.30], [-313337.46],  [4130592.21]]),
    (1, 14, 1080.00, [[3978633.52], [306311.28],   [4966516.86]]),
    (1, 15, 1500.00, [[3771037.60], [898732.45],   [5055808.19]]),
    (1, 16, 1200.00, [[4629467.70], [1026020.23],  [4254991.45]]),
    (2, 1,  2000.00, [[2871529.36], [1335712.45],  [5528094.82]]),
    (2, 2,  1400.00, [[3916904.74], [305684.71],   [5015381.85]]),
    (2, 3,  1100.00, [[3506335.17], [781724.52],   [5261574.05]]),
    (2, 4,  1300.00, [[4187571.65], [171778.44],   [4798372.31]]),
    (2, 5,  2000.00, [[4073672.03], [1196123.56],  [4750171.12]]),
    (2, 6,  1800.00, [[3642005.91], [1399313.87],  [5036601.50]]),
    (2, 7,  1100.00, [[3727617.22], [656855.67],   [5124748.92]]),
    (2, 8,  2100.00, [[4068863.73], [1404219.05],  [4697037.13]]),
    (2, 9,  2000.00, [[4776300.55], [179647.34],   [4212400.85]]),
    (2, 10, 1800.00, [[4165201.60], [853184.42],   [4744766.90]]),
    (2, 11, 1500.00, [[3089215.84], [1007518.11],  [5480081.55]]),
    (2, 12, 1600.00, [[4038925.22], [616753.05],   [4888388.26]]),
    (2, 13, 1300.00, [[3137883.12], [596195.86],   [5512520.39]]),
    (2, 14, 2000.00, [[3960132.01], [1018155.11],  [4885729.80]]),
    (2, 15, 1600.00, [[4144099.14], [669960.54],   [4792414.44]]),
    (2, 16, 2000.00, [[3824498.89], [1172080.09],  [4958737.49]]),
    (3, 1,  1500.00, [[4410958.41], [713514.00],   [4541363.75]]),
    (3, 2,  1300.00, [[4299765.90], [1853546.05],  [4320419.11]]),
    (3, 3,  1900.00, [[3985471.63], [486043.26],   [4946657.34]]),
    (3, 4,  600.00,  [[4669514.06], [1190727.92],  [4167426.84]]),
    (3, 5,  1900.00, [[3874979.79], [332003.34],   [5046181.37]]),
    (3, 6,  1600.00, [[4616563.98], [433955.07],   [4369057.23]]),
    (3, 7,  1000.00, [[4446250.49], [604524.44],   [4522725.70]]),
    (3, 8,  1700.00, [[3845603.32], [1395471.42],  [4884018.39]]),
    (3, 9,  1700.00, [[4918271.64], [-32190.47],   [4049593.66]]),
    (3, 10, 1000.00, [[4269110.60], [1221452.38],  [4568631.07]]),
    (3, 11, 2000.00, [[5034046.16], [-528572.99],  [3868931.49]]),
    (3, 12, 1800.00, [[4759979.88], [-73754.64],   [4234004.35]]),
    (3, 13, 1700.00, [[3718215.79], [1313565.45],  [5003904.29]]),
    (3, 14, 1080.00, [[4085093.56], [2000940.11],  [4460705.13]]),
    (3, 15, 1900.00, [[3961278.75], [471185.24],   [4967483.89]]),
    (3, 16, 600.00,  [[4876635.39], [1158780.74],  [3932593.98]]),
    (4, 1,  2200.00, [[4597051.62], [2020600.46],  [3920960.49]]),
    (4, 2,  2000.00, [[3171884.46], [1419189.87],  [5339914.80]]),
    (4, 3,  1600.00, [[3887682.95], [851924.98],   [4974915.69]]),
    (4, 4,  1700.00, [[3329463.78], [706154.41],   [5385690.11]]),
    (4, 5,  1300.00, [[4611888.79], [116255.99],   [4393928.46]]),
    (4, 6,  1100.00, [[3865581.56], [-76231.47],   [5063705.07]]),
    (4, 7,  1400.00, [[4570639.43], [584655.32],   [4399667.53]]),
    (4, 8,  1100.00, [[3670172.41], [-380922.31],  [5193685.94]]),
    (4, 9,  1500.00, [[3940686.48], [484402.33],   [4982568.16]]),
    (4, 10, 1600.00, [[5091632.09], [-393567.62],  [3809203.09]]),
    (4, 11, 2000.00, [[3330020.22], [1572646.72],  [5198787.23]]),
    (4, 12, 1550.00, [[3782049.34], [585606.67],   [5093408.35]]),
    (4, 13, 1600.00, [[4496095.57], [707789.04],   [4458004.07]]),
    (4, 14, 1600.00, [[3890478.06], [951077.25],   [4954722.35]]),
    (4, 15, 1500.00, [[4907473.21], [-789505.95],  [3985351.69]]),
    (4, 16, 1750.00, [[3718324.97], [1131497.77],  [5048109.87]]),
    (5, 1,  2000.00, [[3833839.73], [657618.26],   [5045676.58]]),
    (5, 2,  1300.00, [[4428743.04], [374560.24],   [4564600.82]]),
    (5, 3,  1700.00, [[4063995.57], [794515.12],   [4841727.66]]),
    (5, 4,  1600.00, [[3944256.52], [467894.59],   [4981320.73]]),
    (5, 5,  2000.00, [[3516587.05], [1186080.23],  [5178462.15]]),
    (5, 6,  2000.00, [[4062712.85], [1250376.84],  [4745583.53]]),
    (5, 7,  1100.00, [[5019970.12], [-99074.77],   [3921699.27]]),
    (5, 8,  2200.00, [[2941903.82], [1356458.76],  [5485878.47]]),
    (5, 9,  1100.00, [[4905851.41], [227075.15],   [4058411.00]]),
    (5, 10, 1800.00, [[3674173.23], [953834.06],   [5116668.12]]),
    (5, 11, 1400.00, [[4455748.78], [894105.71],   [4465032.90]]),
    (5, 12, 600.00,  [[4898728.76], [-809920.21],  [3992007.87]]),
    (5, 13, 1800.00, [[3989809.15], [1190414.03],  [4822237.90]]),
    (5, 14, 1200.00, [[5437633.32], [-1356240.55], [3030246.93]]),
    (5, 15, 1500.00, [[4511619.77], [898015.45],   [4407776.80]]),
    (5, 16, 1600.00, [[4367306.66], [953423.03],   [4539521.79]])
]

submarine_coordinates = {
    1: (45.0, -5.0),
    2: (60.0, -10.0),
    3: (37.0, 19.0),
    4: (50.0, -20.0),
    5: (40.0, -15.0)
}

def desired_target_as_vector(sphere, target):

    desired_target = sphere.GeoPoint(latitude=target[0], longitude=target[1], z=0, degrees=True)
    ecef_vectors = desired_target.to_ecef_vector().pvector
    print("ECEF vectors:", *ecef_vectors)
    print("_target value:", struct.pack('d' * len(ecef_vectors), *ecef_vectors).hex(), end="\n\n")


def get_distance(origin, target):

    distance, b, c = origin.distance_and_azimuth(target)
    return distance


def distance_to_missile_targets(sphere):

    for submarine, missile_no, tof, target in missile_data:
        submarine_data = submarine_coordinates[submarine]
        submarine_location = sphere.GeoPoint(latitude=submarine_data[0], longitude=submarine_data[1], z=0, degrees=True)
        missile_target = nv.ECEFvector(target, sphere).to_geo_point()
        distance = get_distance(submarine_location, missile_target)
        print("Distance:", distance, "- Time of flight:", tof, "- _tof:", distance / tof)
    print()


def distance_to_desired_target(sphere, target_coordinates):

    distances = set()
    for submarine, missile_no, tof, target in missile_data:
        submarine_data = submarine_coordinates[submarine]
        submarine_location = sphere.GeoPoint(latitude=submarine_data[0], longitude=submarine_data[1], z=0, degrees=True)
        desired_target = sphere.GeoPoint(latitude=target_coordinates[0], longitude=target_coordinates[1], z=0, degrees=True)
        distance = get_distance(submarine_location, desired_target)
        distances.add((submarine, distance, distance / 1500))
    
    for submarine, distance, _tof in distances:
        _tof = round(_tof, -2)
        print(f"Submarine {submarine} - Distance: {distance} - Recommended _tof: {_tof} ({tof_pack(_tof)})")
    print()


def tof_pack(num):

  num_bytes = struct.pack('>d', num)[::-1]
  num_hex = ''.join('{:02x}'.format(b) for b in num_bytes)[-8:]
  return num_hex


def ecef_vector_to_lat_lon(vector):
  [[x], [y], [z]] = vector
  lon = math.atan2(y, x)
  hyp = math.sqrt(x ** 2 + y ** 2)
  lat = math.atan2(z, hyp)

  lat = lat * 180 / math.pi
  lon = lon * 180 / math.pi

  return lat, lon


def create_map(sphere):

    map = folium.Map(location=[50, 5], zoom_start=4)
    map_name = "map.html"

    for submarine, missile_no, tof, target in missile_data:
        submarine_data = submarine_coordinates[submarine]
        missile_target = ecef_vector_to_lat_lon(target)

        folium.CircleMarker(location=[submarine_data[0], submarine_data[1]], radius=5, color='green').add_to(map)
        folium.CircleMarker(location=[missile_target[0], missile_target[1]], radius=4, color='red').add_to(map)

    map.save(map_name)
    print(f"Map created: {map_name}")


def main():

    earth = nv.FrameE(a=6371e3, f=0)
    desired_target = (24.1851, -43.3704)

    distance_to_missile_targets(earth)
    desired_target_as_vector(earth, desired_target)
    distance_to_desired_target(earth, desired_target)
    create_map(earth)


if __name__ == "__main__":
    main()